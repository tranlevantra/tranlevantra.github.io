---
subtitle: "How to Generate Population Density Dots"
format:
  html:
    toc: true
    toc-depth: 3
---

```{r include=FALSE}
library(tidyverse)
library(sf)
library(ggplot2)
library(knitr)

SA1_count_shapefile <- read_sf("resources/SA1_count_shapefile/SA1_count_shapefile.shp")
points_sf <- read_sf("resources/points_sf/points_sf.shp")


```

::: text-center
![](fig/recreation.png){width="70%"}
:::

## Motivation

::: {.callout-note collapse="false" title="Before we start!!!"}
Let's skim through this [blog post](https://tranlevantra.github.io/personal_website/blog/posts/2025-05-13%20ASGS/) to understand hierarchical structure of Australian Statistical Geography Standard (ASGS) 3th Edition.
:::

SA2-level population data is commonly used in urban planning to determine warehouse locations. However, fulfillment centers operate at the last-mile stage of the logistics chain, delivering directly to households and retail stores. Therefore, using finer-scale population data — at the SA1 or Mesh Block level — is more appropriate to determine their locations.

The yellow population dots in my report were built on SA1 level.

## Inspiration

My inspiration comes from the map[^1] featured in *Population and Housing in Regional Victoria 2020 Report*. As far as I know, the original was created using ArcGIS - not open-source.

[^1]: ![*Population density, Victoria 2016*. Department of Environment, Land, Water and Planning (2020).](fig/inspiration.jpeg){width="30%"}

With some familiarity in R, `dplyr`, and `sf` packages — you can recreate similar dot-density plots at different statistical geography levels and resolutions, completely free of charge.

## Execution

::: {.callout-note collapse="true" title="Resources (to work with spatial vector data in R)"}
You need R, RStudio, and some packages to get started. If you are completely new, I recommend resources from [RLadies Sydney](https://rladiessydney.org/courses/) (`BasicBasics` and `CleanItUp` units are must-read).

In R, Working with tabular data using [`dplyr`](https://dplyr.tidyverse.org) package is straightforward, `|>`or`%>%` pipe operators and these functions: [`mutate`](https://dplyr.tidyverse.org/reference/mutate.html), [`select`](https://dplyr.tidyverse.org/reference/select.html), [`filter`](https://dplyr.tidyverse.org/reference/filter.html) and [`group_by`](https://dplyr.tidyverse.org/reference/group_by.html) along with 4 types of [`join`](https://dplyr.tidyverse.org/reference/mutate-joins.html) should get you far.

The most popular package to work with spatial data in R is [`sf`](https://r-spatial.github.io/sf/). An `sf` object extends regular tabular data frames to include a geometry column, which contains the spatial information. Thus, a simple explanation on [how to read shapefiles](https://r-graph-gallery.com/168-load-a-shape-file-into-r.html) with `sf` should be enough to get you started. Then, those mentioned `dplyr` functions will come in handy.
:::

### 1. Preparing data

This stage involves:

-   Retrieving population data from the Australian Bureau of Statistics (ABS): ABS provides population counts at the smallest level - [Mesh Block](https://www.abs.gov.au/census/guide-census-data/mesh-block-counts/latest-release#data-download), along with [allocation file](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/allocation-files) for mapping among levels, and [shapefiles](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files) for each level. By joining these files[^2], a shapefile with population counts of any level can be created.

-   Choosing a resolution for the population dots (e.g., 1 dot = 100 people)

[^2]: ![*4 types of JOIN*. Trust-me-bro (n.d.).](fig/joins.webp){width="30%"}

```{r}
#| echo: true
#| eval: false

SA1_count_shapefile |>                          # <1>
  dplyr::mutate(n_dots = floor(Person / 100))  |>      # <2>
  dplyr::filter(n_dots > 0) -> SA_count_shapefile     # <3>

```

1.  `SA1_count_shapefile` includes population counts `Person`, and polygon `Geometry` for each SA1 block (see below).

2.  `n_dots` is the number of population dots to generate per SA1 polygon, calculated as `floor(Person / 100)`. This resolution (1 dot = 100 people) is chosen because most SA1s have between 200 and 800 people, resulting in 2 to 8 dots per block. Using `floor()` ensures we only generate whole dots and prevents overcounting.

3.  Optionally, to reduce computation time, `filter(n_dots > 0)` is to skip blocks with zero population.

Output of this stage should be an `sf` object with polygons and number of dots for each polygon.

```{r}
#| code-fold: false
SA1_count_shapefile
```

### 2. Generating population dots

Generating population dots is the process to ramdomly sampling points within each polygon with [`st_sample()`](https://r-spatial.github.io/sf/reference/st_sample.html) from `sf` package.

```{r}
#| echo: true
#| eval: false

sf::st_sample(SA1_count_shapefile, size = SA1_count_shapefile$n_dots)|>  # <1>
  sf::st_sf() -> points_sf  # <2>

```

1.  `st_sample` takes in an `sf` object with multipolygon geometry, `size` argument specifies the number of points to sample from each polygon.

2.  Result is converted from a list of points to an `sf` object with [`st_sf()`](https://r-spatial.github.io/sf/reference/st_sf.html).

Result should have geometry column representing point locations.

```{r}
#| code-fold: false
points_sf
```

### 3. Recreating the plot

My data processing stage results in [`SA1_count_shapefile`](https://github.com/tranlevantra/personal_website/blob/main/projects/Greater%20Melbourne%20Distribution%20Center%20Landscape/resources/SA1_count_shapefile.zip) and the sampling density dots process results in [`points_sf`](https://github.com/tranlevantra/personal_website/blob/main/projects/Greater%20Melbourne%20Distribution%20Center%20Landscape/resources/points_sf.zip)

Below is the code to recreate the plot at the beginning of this post

```{r}
#| echo: true
#| eval: false

library(ggplot2)
library(ggtext)  

ggplot() +
  geom_sf(data = SA1_count_shapefile, fill = "grey95", color = "white", size = 0.1) +
  geom_sf(data = points_sf, color = "orange", size = 0.3, alpha = 0.7) +
  theme_minimal() +
  labs(
    title = "Population Density in Victoria",
    subtitle = "Each <span style='color:orange'>&#9679;</span> = 100 people",
    caption = "Source: ABS Census Data 2021"
  ) +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_markdown(size = 12, hjust = 0.5),
    plot.caption = element_text(size = 9, hjust = 1)
  )
```
